#!/usr/bin/perl -w
use strict;
use List::Util qw[max];

my $f = 10.0;
my $p = 10.0;
sub calculate_limit {
    my($p,$f) = @_;

    return calculate_limit_0($p) if($f <= 0.15);
    return calculate_limit_1($p) if($f <= 1.0);
    return calculate_limit_2($p) if($f <= 10.0);
    return calculate_limit_3($p) if($f <= 400.0);
    return calculate_limit_4($p) if($f <= 2000.0);
    return calculate_limit_5($p) if($f <= 300000.0);
}


sub pi {
    return 3.141592654;
}

sub calculate_limit_0 {
    my($p) = @_;
    my $max_e = 87.000;
    my $max_h = 5.000;
    my $max_p = undef;

    return max( sqrt(($p*377*(1+0.6)**2)/(4*pi()*($max_e**2))),  sqrt($p*(1+0.6)**2/(4*pi()*377*($max_h**2))));
}

sub calculate_limit_1 {
    my($p) = @_;
    my $max_e = 87.000;
    my $max_h = 0.005;
    my $max_p = undef;
    #printf("Using max_e %f, max_h %f, max_p %f, power %f\n",$max_e,$max_h,$max_p,$p);

    return max(sqrt(($p*377*(1+0.6)**2)/(4*pi()*($max_e**2))), sqrt($p*(1+0.6)**2/(4*pi()*377*($max_h**2))));
}

sub calculate_limit_2 {
    my($p) = @_;
    my $max_e = 7.250;
    my $max_h = 0.005;
    my $max_p = undef;
    #printf("Using max_e %f, max_h %f, max_p %f, power %f\n",$max_e,$max_h,$max_p,$p);

    return max(sqrt(($p*377*(1+0.6)**2)/(4*pi()*($max_e**2))), sqrt($p*(1+0.6)**2/(4*pi()*377*($max_h**2))));
}

sub calculate_limit_3 {
    my($p) = @_;
    my $max_e = 28.000;
    my $max_h = 0.073;
    my $max_p = 2.000;
    #printf("Using max_e %f, max_h %f, max_p %f, power %f\n",$max_e,$max_h,$max_p,$p);

    return sqrt($p*(1+0.6)**2/($max_p*4*pi()));
}

sub calculate_limit_4 {
    my($p) = @_;
    my $max_e = 16.500;
    my $max_h = 0.044;
    my $max_p = 0.720;
    #printf("Using max_e %f, max_h %f, max_p %f, power %f\n",$max_e,$max_h,$max_p,$p);

    return sqrt($p*(1+0.6)**2/($max_p*4*pi()));
}

sub calculate_limit_5 {
    my($p) = @_;
    my $max_e = 61.000;
    my $max_h = 0.160;
    my $max_p = 10.000;
    #printf("Using max_e %f, max_h %f, max_p %f, power %f\n",$max_e,$max_h,$max_p,$p);

    return sqrt($p*(1+0.6)**2/($max_p*4*pi()));
}

sub run_graph {
    my ($f,$outfile) = @_;
    for(my $p = 1.0;$p <= 4000.0 ; $p += 2){
        printf($outfile "%f,%f\n",$p,calculate_limit($p,$f));
    }
}

my $outfile = undef;
open($outfile,">","distances_100-150kHz.csv") or die("$!");
run_graph(0.101,$outfile);
close($outfile);

open($outfile,">","distances_150kHz-1MHz.csv") or die("$!");
run_graph(0.171,$outfile);
close($outfile);

open($outfile,">","distances_1MHz-10MHz.csv") or die("$!");
run_graph(1.101,$outfile);
close($outfile);

open($outfile,">","distances_10MHz-400MHz.csv") or die("$!");
run_graph(11.101,$outfile);
close($outfile);

open($outfile,">","distances_400MHz-2000MHz.csv") or die("$!");
run_graph(430.101,$outfile);
close($outfile);

open($outfile,">","distances_2000MHz-up.csv") or die("$!");
run_graph(2111.0,$outfile);
close($outfile);

